#!/usr/bin/env python3

import argparse
import os
import re

parser = argparse.ArgumentParser()
parser.add_argument("-t", "--tests",
                    help="Main function runs unit tests instead of reading STDIN",
                    action="store_true")
parser.add_argument("-p", "--prefix-output",
                    help="Read STDIN & prefix K-th test case's output with `Case #K: `",
                    action="store_true")
parser.add_argument("-s", "--cpp-standard",
                    type=int,
                    default=17,
                    help="The C++ standard to use: 20, 17 (default), 14, or 11")
parser.add_argument("name", help="The name of the problem")
args = parser.parse_args()

streams_snippet = """cin.tie(0)->sync_with_stdio(0);
    cin.exceptions(cin.failbit);
"""

code = '#include "lest.hpp"\n' if args.tests else ""

code += """#include <bits/stdc++.h>
using namespace std;

template <typename T> constexpr int inof(const T x) { return static_cast<int>(x); }

template <typename T> constexpr int sz(const T &xs) { return inof(xs.size()); }
"""

if args.cpp_standard < 17:
    code = code + """
template <typename T> constexpr typename T::const_iterator xbegin(const T &xs) {
    return xs.cbegin();
}

template <typename T> constexpr typename T::const_iterator xend(const T &xs) {
    return xs.cend();
}
"""

if args.tests:
    code = code + """
struct Solution final {
    int solve_it() const { return 42; }
};

// clang-format off
const lest::test tests[] = {
    CASE("Example 0") {
        const auto actual = Solution{}.solve_it();
        const auto expected = 42;
        EXPECT(actual == expected);
    },
    CASE("Example 1") {
        const auto actual = Solution{}.solve_it();
        const auto expected = 42;
        EXPECT(actual == expected);
    },
};
// clang-format on

int main(int argc, char **argv) { return lest::run(tests, argc, argv); }
"""
elif args.prefix_output:
    code = code + """
int solve() {{
    return -1;
}}

int main() {{
    {0}
    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i) {{
        cout << "Case #" << i << ": " << solve() << '\\n';
    }}

    return 0;
}}
""".format(streams_snippet)
else:
    code = code + """
int main() {{
    {0}
    int t;
    cin >> t;
    while (t--) {{
    }}

    return 0;
}}
""".format(streams_snippet)

sanitization_arguments="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_GLIBCXX_CONCEPT_CHECKS -D_GLIBCXX_ASSERTIONS -D_GLIBCXX_SANITIZE_VECTOR -D_FORTIFY_SOURCE=2 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover -fstack-protector "

compilation_command_base="g++ -I/home/ikr/code/ac-library -std=gnu++{0} -Wall -Wextra -Wshadow -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -pedantic -Wcast-qual -Wcast-align {1}-O2 -o ./solution ./solution.cpp"

normal_compilation_command = compilation_command_base.format(args.cpp_standard, sanitization_arguments)
optimized_compilation_command = compilation_command_base.format(args.cpp_standard, "")

makefile = """build:
	{0}

optimized:
	{1}

run: build
	./solution{2}
""".format(normal_compilation_command, optimized_compilation_command, ' -p' if args.tests else '')

compile_flags = """-I/home/ikr/code/ac-library
-std=c++{0}
""".format(args.cpp_standard)

def normalize(name):
    ans = name
    muted = "!#$%^*()'!?:."
    for x in muted:
        ans = ans.replace(x, '')
    return re.sub(r'[ &,]+', '_', ans)

path = os.path.join(os.getcwd(), normalize(args.name))
os.mkdir(path)
os.chdir(path)

with open("solution.cpp", "w+") as file:
    file.write(code)

with open("Makefile", "w+") as file:
    file.write(makefile)

with open("compile_flags.txt", "w+") as file:
    file.write(compile_flags)

if args.tests:
    os.system('ln -s /home/ikr/code/lest/include/lest/lest.hpp ./lest.hpp')

os.system('emacsclient -n ./solution.cpp')

clipboard_command = """echo 'cd ./{0} && make run' | xclip -selection clipboard""".format(normalize(args.name))
os.system(clipboard_command)
