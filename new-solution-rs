#!/usr/bin/env python3

import argparse
import os
import re

parser = argparse.ArgumentParser()
parser.add_argument("-a", "--atcoder",
                    help="Assume the crates available at AtCoder",
                    action="store_true")
parser.add_argument("-e", "--embed",
                    help="Assume running in a “0 crates available” mode; embed input scanner",
                    action="store_true")
parser.add_argument("-p", "--prefix-output",
                    help="Read STDIN & prefix K-th test case's output with `Case #K: `",
                    action="store_true")
parser.add_argument("name", help="The name of the problem")
args = parser.parse_args()

code = ""

if args.prefix_output:
    code = code + """use proconio::input;
// use proconio::marker::Bytes;
use proconio_derive::fastout;


fn solve(xs: Vec<i32>) -> i32 {
    xs.into_iter().sum::<i32>()
}

#[fastout]
fn main() {
    input! {
        cases_num: u16,
    }

    for t in 1..=cases_num {
        input! {
            n: usize,
            xs: [i32; n],
        }

        let result = solve(xs);
        println!("Case #{t}: {result}");
    }
}
"""
elif args.embed:
    code += """use std::io::{BufWriter, Write, stdin, stdout};

#[derive(Default)]
struct Scanner {
    buffer: Vec<String>,
}

impl Scanner {
    fn next<T: std::str::FromStr>(&mut self) -> T {
        loop {
            if let Some(token) = self.buffer.pop() {
                return token.parse().ok().expect("Failed parse");
            }
            let mut input = String::new();
            stdin().read_line(&mut input).expect("Failed read");
            self.buffer = input.split_whitespace().rev().map(String::from).collect();
        }
    }

    fn next_n<T: std::str::FromStr>(&mut self, n: usize) -> Vec<T> {
        let mut result: Vec<T> = Vec::with_capacity(n);
        for _ in 0..n {
            result.push(self.next());
        }
        result
    }
}

fn solve(xs: Vec<i64>) -> i64 {
    xs.into_iter().sum()
}

fn main() {
    let stdout = stdout();
    let handle = stdout.lock();
    let mut writer = BufWriter::new(handle);

    let mut scanner = Scanner::default();
    let cases_num: u16 = scanner.next();

    for _ in 1..=cases_num {
        let n: usize = scanner.next();
        let xs: Vec<i64> = scanner.next_n(n);

        let result = solve(xs);
        writeln!(writer, "{result}").unwrap();
    }

    writer.flush().unwrap();
}
"""
elif args.atcoder:
    code += """use std::io::{stdout, BufWriter, Write};
use proconio::input;
// use proconio::marker::Bytes;

fn solve(xs: Vec<i32>) -> i32 {
    xs.into_iter().sum::<i32>()
}

fn main() {
    let stdout = stdout();
    let handle = stdout.lock();
    let mut writer = BufWriter::new(handle);

    input! {
        n: usize,
        xs: [i32; n],
    }

    let result = solve(xs);
    writeln!(writer, "{result}").unwrap();
    writer.flush().unwrap();
}
"""
else:
    code += """use std::io::{BufRead, stdin};

fn main() {
    let lines: Vec<String> = stdin().lock().lines().map(|line| line.unwrap()).collect();
    eprintln!("{:?}", lines);
}
"""

def normalize(name):
    ans = name
    muted = "!#$%^*()'!?:."
    for x in muted:
        ans = ans.replace(x, '')
    return re.sub(r'[ &,/]+', '_', ans)

os.system('cargo new {0} --name solution'.format(normalize(args.name)))
path = os.path.join(os.getcwd(), normalize(args.name))
os.chdir(path)

if args.atcoder:
    os.system('cargo add proconio')

if args.prefix_output:
    os.system('cargo add proconio')
    os.system('cargo add proconio_derive')

with open("src/main.rs", "w+") as file:
    file.write(code)

os.system('emacsclient -n ./src/main.rs')

clipboard_command = """echo 'cd ./{0} && cargo build' | xclip -selection clipboard""".format(normalize(args.name))
os.system(clipboard_command)
